//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rayvarz.inv.assistant.service.Models.ray
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<InvHdrData> InvHdrDatas { get; set; }
        public virtual DbSet<InvPrd> InvPrds { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Center> Centers { get; set; }
        public virtual DbSet<CenterGrp> CenterGrps { get; set; }
        public virtual DbSet<Func> Funcs { get; set; }
        public virtual DbSet<InvAddDocInf> InvAddDocInfs { get; set; }
        public virtual DbSet<InvAddDocInfHdr> InvAddDocInfHdrs { get; set; }
        public virtual DbSet<InvArcSoh> InvArcSohs { get; set; }
        public virtual DbSet<InvCnsTyp> InvCnsTyps { get; set; }
        public virtual DbSet<InvDoc> InvDocs { get; set; }
        public virtual DbSet<InvDocSt> InvDocSts { get; set; }
        public virtual DbSet<InvDocTyp> InvDocTyps { get; set; }
        public virtual DbSet<InvDtlData> InvDtlDatas { get; set; }
        public virtual DbSet<InvModel> InvModels { get; set; }
        public virtual DbSet<InvMstr> InvMstrs { get; set; }
        public virtual DbSet<InvOrdr> InvOrdrs { get; set; }
        public virtual DbSet<InvRcptTyp> InvRcptTyps { get; set; }
        public virtual DbSet<InvReqTyp> InvReqTyps { get; set; }
        public virtual DbSet<InvRfDoc> InvRfDocs { get; set; }
        public virtual DbSet<InvRtrnBuy> InvRtrnBuys { get; set; }
        public virtual DbSet<InvRtrnStr> InvRtrnStrs { get; set; }
        public virtual DbSet<InvSeri> InvSeris { get; set; }
        public virtual DbSet<InvSerial> InvSerials { get; set; }
        public virtual DbSet<InvUserLvl> InvUserLvls { get; set; }
        public virtual DbSet<ItemData> ItemDatas { get; set; }
        public virtual DbSet<PartGrp> PartGrps { get; set; }
        public virtual DbSet<RaySy> RaySys { get; set; }
        public virtual DbSet<RaySysSpc> RaySysSpcs { get; set; }
        public virtual DbSet<RaySysYr> RaySysYrs { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UserDomain> UserDomains { get; set; }
        public virtual DbSet<UserId> UserIds { get; set; }
        public virtual DbSet<InvAssistantVw_getPartGrpFullPath> InvAssistantVw_getPartGrpFullPath { get; set; }
    
        public virtual ObjectResult<InvSp_FillForceQty_Result> InvSp_FillForceQty(Nullable<byte> docType, string fieldname, string storeno)
        {
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(byte));
    
            var fieldnameParameter = fieldname != null ?
                new ObjectParameter("Fieldname", fieldname) :
                new ObjectParameter("Fieldname", typeof(string));
    
            var storenoParameter = storeno != null ?
                new ObjectParameter("Storeno", storeno) :
                new ObjectParameter("Storeno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvSp_FillForceQty_Result>("InvSp_FillForceQty", docTypeParameter, fieldnameParameter, storenoParameter);
        }
    
        public virtual ObjectResult<InvSp_FindPropertyFromItemData_Result> InvSp_FindPropertyFromItemData(string partNo)
        {
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvSp_FindPropertyFromItemData_Result>("InvSp_FindPropertyFromItemData", partNoParameter);
        }
    
        public virtual ObjectResult<InvSp_SelectDocReferDtl_Result> InvSp_SelectDocReferDtl(Nullable<int> fiscalYear, string storeNo, Nullable<byte> docType, Nullable<int> docno, Nullable<byte> refDocType, Nullable<bool> isExistsItmCircle)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(byte));
    
            var docnoParameter = docno.HasValue ?
                new ObjectParameter("Docno", docno) :
                new ObjectParameter("Docno", typeof(int));
    
            var refDocTypeParameter = refDocType.HasValue ?
                new ObjectParameter("RefDocType", refDocType) :
                new ObjectParameter("RefDocType", typeof(byte));
    
            var isExistsItmCircleParameter = isExistsItmCircle.HasValue ?
                new ObjectParameter("IsExistsItmCircle", isExistsItmCircle) :
                new ObjectParameter("IsExistsItmCircle", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvSp_SelectDocReferDtl_Result>("InvSp_SelectDocReferDtl", fiscalYearParameter, storeNoParameter, docTypeParameter, docnoParameter, refDocTypeParameter, isExistsItmCircleParameter);
        }
    
        public virtual ObjectResult<InvSp_ValidSoh_Result> InvSp_ValidSoh(Nullable<int> fiscalYear, string storeNo, string partNo, Nullable<decimal> qty, Nullable<bool> docOPerator, string p_DocDate, string pre_Docdate, Nullable<decimal> pre_Qty, Nullable<bool> preOperator, Nullable<int> docType, ObjectParameter valid)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var docOPeratorParameter = docOPerator.HasValue ?
                new ObjectParameter("DocOPerator", docOPerator) :
                new ObjectParameter("DocOPerator", typeof(bool));
    
            var p_DocDateParameter = p_DocDate != null ?
                new ObjectParameter("P_DocDate", p_DocDate) :
                new ObjectParameter("P_DocDate", typeof(string));
    
            var pre_DocdateParameter = pre_Docdate != null ?
                new ObjectParameter("Pre_Docdate", pre_Docdate) :
                new ObjectParameter("Pre_Docdate", typeof(string));
    
            var pre_QtyParameter = pre_Qty.HasValue ?
                new ObjectParameter("Pre_Qty", pre_Qty) :
                new ObjectParameter("Pre_Qty", typeof(decimal));
    
            var preOperatorParameter = preOperator.HasValue ?
                new ObjectParameter("PreOperator", preOperator) :
                new ObjectParameter("PreOperator", typeof(bool));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvSp_ValidSoh_Result>("InvSp_ValidSoh", fiscalYearParameter, storeNoParameter, partNoParameter, qtyParameter, docOPeratorParameter, p_DocDateParameter, pre_DocdateParameter, pre_QtyParameter, preOperatorParameter, docTypeParameter, valid);
        }
    
        public virtual int InvSp_UserAutoDoc(string userId, string storeNo, Nullable<byte> docType, ObjectParameter autoDocNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UserAutoDoc", userIdParameter, storeNoParameter, docTypeParameter, autoDocNo);
        }
    
        public virtual int InvSp_DelInvSerial(Nullable<int> fiscalYear, string storeNo)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_DelInvSerial", fiscalYearParameter, storeNoParameter);
        }
    
        public virtual int InvSp_UpdateInvArcSerialSoh(Nullable<int> fiscalYear, string storeNo, Nullable<short> docType, Nullable<int> docno)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(short));
    
            var docnoParameter = docno.HasValue ?
                new ObjectParameter("Docno", docno) :
                new ObjectParameter("Docno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateInvArcSerialSoh", fiscalYearParameter, storeNoParameter, docTypeParameter, docnoParameter);
        }
    
        public virtual int InvSp_UpdateInvArcSohOneDoc(Nullable<int> fiscalYear, string storeNo, Nullable<byte> doctype, Nullable<int> docNo, string docDate)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var doctypeParameter = doctype.HasValue ?
                new ObjectParameter("Doctype", doctype) :
                new ObjectParameter("Doctype", typeof(byte));
    
            var docNoParameter = docNo.HasValue ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(int));
    
            var docDateParameter = docDate != null ?
                new ObjectParameter("DocDate", docDate) :
                new ObjectParameter("DocDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateInvArcSohOneDoc", fiscalYearParameter, storeNoParameter, doctypeParameter, docNoParameter, docDateParameter);
        }
    
        public virtual int InvSp_UpdateInvMstr(Nullable<int> fiscalYear, string storeNo)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateInvMstr", fiscalYearParameter, storeNoParameter);
        }
    
        public virtual int InvSp_UpdateInvMstrOneDoc(Nullable<int> fiscalYear, string storeNo, Nullable<byte> doctype, Nullable<int> docNo, Nullable<bool> ver)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var doctypeParameter = doctype.HasValue ?
                new ObjectParameter("Doctype", doctype) :
                new ObjectParameter("Doctype", typeof(byte));
    
            var docNoParameter = docNo.HasValue ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(int));
    
            var verParameter = ver.HasValue ?
                new ObjectParameter("Ver", ver) :
                new ObjectParameter("Ver", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateInvMstrOneDoc", fiscalYearParameter, storeNoParameter, doctypeParameter, docNoParameter, verParameter);
        }
    
        public virtual int InvSp_UpdateInvSerial(Nullable<int> fiscalYear, string storeNo)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateInvSerial", fiscalYearParameter, storeNoParameter);
        }
    
        public virtual int InvSp_DocCounter(Nullable<int> fiscalyear, string storeNo, Nullable<int> docType, Nullable<int> docNo)
        {
            var fiscalyearParameter = fiscalyear.HasValue ?
                new ObjectParameter("Fiscalyear", fiscalyear) :
                new ObjectParameter("Fiscalyear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo.HasValue ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_DocCounter", fiscalyearParameter, storeNoParameter, docTypeParameter, docNoParameter);
        }
    
        public virtual int InvSp_FillDateInMstr(Nullable<int> fiscalYear, string storeno, Nullable<byte> doctype, string partNo)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storenoParameter = storeno != null ?
                new ObjectParameter("storeno", storeno) :
                new ObjectParameter("storeno", typeof(string));
    
            var doctypeParameter = doctype.HasValue ?
                new ObjectParameter("doctype", doctype) :
                new ObjectParameter("doctype", typeof(byte));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_FillDateInMstr", fiscalYearParameter, storenoParameter, doctypeParameter, partNoParameter);
        }
    
        public virtual int InvSp_UpdateRefDocQty(Nullable<int> fiscalYear, string storeNo, Nullable<byte> docType, Nullable<int> docno, Nullable<bool> delFlag, string whichField)
        {
            var fiscalYearParameter = fiscalYear.HasValue ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(int));
    
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("StoreNo", storeNo) :
                new ObjectParameter("StoreNo", typeof(string));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(byte));
    
            var docnoParameter = docno.HasValue ?
                new ObjectParameter("Docno", docno) :
                new ObjectParameter("Docno", typeof(int));
    
            var delFlagParameter = delFlag.HasValue ?
                new ObjectParameter("DelFlag", delFlag) :
                new ObjectParameter("DelFlag", typeof(bool));
    
            var whichFieldParameter = whichField != null ?
                new ObjectParameter("WhichField", whichField) :
                new ObjectParameter("WhichField", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateRefDocQty", fiscalYearParameter, storeNoParameter, docTypeParameter, docnoParameter, delFlagParameter, whichFieldParameter);
        }
    
        public virtual int InvSp_UpdateRtrnQty(Nullable<int> fiscalYearTmp, string storeNoTmp, Nullable<int> docTypeTmp, Nullable<int> docNoTmp, Nullable<int> docRowTmp, Nullable<decimal> qtyReqTmp, Nullable<decimal> qtyTmp)
        {
            var fiscalYearTmpParameter = fiscalYearTmp.HasValue ?
                new ObjectParameter("FiscalYearTmp", fiscalYearTmp) :
                new ObjectParameter("FiscalYearTmp", typeof(int));
    
            var storeNoTmpParameter = storeNoTmp != null ?
                new ObjectParameter("StoreNoTmp", storeNoTmp) :
                new ObjectParameter("StoreNoTmp", typeof(string));
    
            var docTypeTmpParameter = docTypeTmp.HasValue ?
                new ObjectParameter("DocTypeTmp", docTypeTmp) :
                new ObjectParameter("DocTypeTmp", typeof(int));
    
            var docNoTmpParameter = docNoTmp.HasValue ?
                new ObjectParameter("DocNoTmp", docNoTmp) :
                new ObjectParameter("DocNoTmp", typeof(int));
    
            var docRowTmpParameter = docRowTmp.HasValue ?
                new ObjectParameter("DocRowTmp", docRowTmp) :
                new ObjectParameter("DocRowTmp", typeof(int));
    
            var qtyReqTmpParameter = qtyReqTmp.HasValue ?
                new ObjectParameter("QtyReqTmp", qtyReqTmp) :
                new ObjectParameter("QtyReqTmp", typeof(decimal));
    
            var qtyTmpParameter = qtyTmp.HasValue ?
                new ObjectParameter("QtyTmp", qtyTmp) :
                new ObjectParameter("QtyTmp", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvSp_UpdateRtrnQty", fiscalYearTmpParameter, storeNoTmpParameter, docTypeTmpParameter, docNoTmpParameter, docRowTmpParameter, qtyReqTmpParameter, qtyTmpParameter);
        }
    
        [DbFunction("Entities", "InvAssistantTVFUNC_SerialSoh_GetList")]
        public virtual IQueryable<InvAssistantTVFUNC_SerialSoh_GetList_Result> InvAssistantTVFUNC_SerialSoh_GetList(string storeNo, string partNo, string f_serial)
        {
            var storeNoParameter = storeNo != null ?
                new ObjectParameter("storeNo", storeNo) :
                new ObjectParameter("storeNo", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("partNo", partNo) :
                new ObjectParameter("partNo", typeof(string));
    
            var f_serialParameter = f_serial != null ?
                new ObjectParameter("f_serial", f_serial) :
                new ObjectParameter("f_serial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<InvAssistantTVFUNC_SerialSoh_GetList_Result>("[Entities].[InvAssistantTVFUNC_SerialSoh_GetList](@storeNo, @partNo, @f_serial)", storeNoParameter, partNoParameter, f_serialParameter);
        }
    }
}
